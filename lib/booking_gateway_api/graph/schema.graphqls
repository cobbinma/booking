scalar Date

scalar TimeOfDay

input SlotInput {
  venueId: ID!
  customerId: ID!,
  people: Int!,
  date: Date!,
  startsAt: TimeOfDay!,
  duration: Int!,
}

type Slot {
  id: ID!
  venueId: ID!
  customerId: ID!,
  people: Int!,
  date: Date!,
  startsAt: TimeOfDay!,
  endsAt: TimeOfDay!,
  duration: Int!,
}

input BookingInput {
  id: ID!
  venueId: ID!
  customerId: ID!,
  people: Int!,
  date: Date!,
  startsAt: TimeOfDay!,
  duration: Int!,
}

type Booking {
  id: ID!
  venueId: ID!
  customerId: ID!,
  people: Int!,
  date: Date!,
  startsAt: TimeOfDay!,
  endsAt: TimeOfDay!,
  duration: Int!,
}

type Venue {
  id: ID!
  name: String!
  openingHours: [OpeningHoursSpecification!]!
  specialOpeningHours: [OpeningHoursSpecification!]!
}

type OpeningHoursSpecification {
  dayOfWeek: Int!,
  opens: TimeOfDay!,
  closes: TimeOfDay!,
  validFrom: Date,
  validThrough: Date,
}

type Query {
  getVenue(id: ID!): Venue!
}

type Mutation {
  createSlot(input: SlotInput!): Slot!
  createBooking(input: BookingInput!): Booking!
}