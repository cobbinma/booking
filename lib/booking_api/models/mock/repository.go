// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	context "context"
	models "github.com/cobbinma/booking-platform/lib/booking_api/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Migrate mocks base method
func (m *MockRepository) Migrate(ctx context.Context, sourceURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx, sourceURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate
func (mr *MockRepositoryMockRecorder) Migrate(ctx, sourceURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockRepository)(nil).Migrate), ctx, sourceURL)
}

// CreateBooking mocks base method
func (m *MockRepository) CreateBooking(ctx context.Context, booking models.Slot) (*models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, booking)
	ret0, _ := ret[0].(*models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking
func (mr *MockRepositoryMockRecorder) CreateBooking(ctx, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockRepository)(nil).CreateBooking), ctx, booking)
}

// GetBookings mocks base method
func (m *MockRepository) GetBookings(ctx context.Context, options ...func(*models.BookingFilter) *models.BookingFilter) ([]models.Booking, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookings", varargs...)
	ret0, _ := ret[0].([]models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookings indicates an expected call of GetBookings
func (mr *MockRepositoryMockRecorder) GetBookings(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookings", reflect.TypeOf((*MockRepository)(nil).GetBookings), varargs...)
}

// DeleteBookings mocks base method
func (m *MockRepository) DeleteBookings(ctx context.Context, id []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookings", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookings indicates an expected call of DeleteBookings
func (mr *MockRepositoryMockRecorder) DeleteBookings(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookings", reflect.TypeOf((*MockRepository)(nil).DeleteBookings), ctx, id)
}
