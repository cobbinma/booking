// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cobbinma/booking-platform/lib/protobuf/autogen/lang/go/venue/api (interfaces: VenueAPIClient)

// Package mock_resolver is a generated GoMock package.
package mock_resolver

import (
	context "context"
	reflect "reflect"

	api "github.com/cobbinma/booking-platform/lib/protobuf/autogen/lang/go/venue/api"
	models "github.com/cobbinma/booking-platform/lib/protobuf/autogen/lang/go/venue/models"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockVenueAPIClient is a mock of VenueAPIClient interface.
type MockVenueAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockVenueAPIClientMockRecorder
}

// MockVenueAPIClientMockRecorder is the mock recorder for MockVenueAPIClient.
type MockVenueAPIClientMockRecorder struct {
	mock *MockVenueAPIClient
}

// NewMockVenueAPIClient creates a new mock instance.
func NewMockVenueAPIClient(ctrl *gomock.Controller) *MockVenueAPIClient {
	mock := &MockVenueAPIClient{ctrl: ctrl}
	mock.recorder = &MockVenueAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVenueAPIClient) EXPECT() *MockVenueAPIClientMockRecorder {
	return m.recorder
}

// AddAdmin mocks base method.
func (m *MockVenueAPIClient) AddAdmin(arg0 context.Context, arg1 *api.AddAdminRequest, arg2 ...grpc.CallOption) (*api.AddAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAdmin", varargs...)
	ret0, _ := ret[0].(*api.AddAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdmin indicates an expected call of AddAdmin.
func (mr *MockVenueAPIClientMockRecorder) AddAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmin", reflect.TypeOf((*MockVenueAPIClient)(nil).AddAdmin), varargs...)
}

// AddTable mocks base method.
func (m *MockVenueAPIClient) AddTable(arg0 context.Context, arg1 *api.AddTableRequest, arg2 ...grpc.CallOption) (*models.Table, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTable", varargs...)
	ret0, _ := ret[0].(*models.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTable indicates an expected call of AddTable.
func (mr *MockVenueAPIClientMockRecorder) AddTable(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTable", reflect.TypeOf((*MockVenueAPIClient)(nil).AddTable), varargs...)
}

// CreateVenue mocks base method.
func (m *MockVenueAPIClient) CreateVenue(arg0 context.Context, arg1 *api.CreateVenueRequest, arg2 ...grpc.CallOption) (*models.Venue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVenue", varargs...)
	ret0, _ := ret[0].(*models.Venue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVenue indicates an expected call of CreateVenue.
func (mr *MockVenueAPIClientMockRecorder) CreateVenue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVenue", reflect.TypeOf((*MockVenueAPIClient)(nil).CreateVenue), varargs...)
}

// GetAdmins mocks base method.
func (m *MockVenueAPIClient) GetAdmins(arg0 context.Context, arg1 *api.GetAdminsRequest, arg2 ...grpc.CallOption) (*api.GetAdminsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAdmins", varargs...)
	ret0, _ := ret[0].(*api.GetAdminsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmins indicates an expected call of GetAdmins.
func (mr *MockVenueAPIClientMockRecorder) GetAdmins(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmins", reflect.TypeOf((*MockVenueAPIClient)(nil).GetAdmins), varargs...)
}

// GetOpeningHoursSpecification mocks base method.
func (m *MockVenueAPIClient) GetOpeningHoursSpecification(arg0 context.Context, arg1 *api.GetOpeningHoursSpecificationRequest, arg2 ...grpc.CallOption) (*api.GetOpeningHoursSpecificationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOpeningHoursSpecification", varargs...)
	ret0, _ := ret[0].(*api.GetOpeningHoursSpecificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpeningHoursSpecification indicates an expected call of GetOpeningHoursSpecification.
func (mr *MockVenueAPIClientMockRecorder) GetOpeningHoursSpecification(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpeningHoursSpecification", reflect.TypeOf((*MockVenueAPIClient)(nil).GetOpeningHoursSpecification), varargs...)
}

// GetTables mocks base method.
func (m *MockVenueAPIClient) GetTables(arg0 context.Context, arg1 *api.GetTablesRequest, arg2 ...grpc.CallOption) (*api.GetTablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTables", varargs...)
	ret0, _ := ret[0].(*api.GetTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTables indicates an expected call of GetTables.
func (mr *MockVenueAPIClientMockRecorder) GetTables(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTables", reflect.TypeOf((*MockVenueAPIClient)(nil).GetTables), varargs...)
}

// GetVenue mocks base method.
func (m *MockVenueAPIClient) GetVenue(arg0 context.Context, arg1 *api.GetVenueRequest, arg2 ...grpc.CallOption) (*models.Venue, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVenue", varargs...)
	ret0, _ := ret[0].(*models.Venue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVenue indicates an expected call of GetVenue.
func (mr *MockVenueAPIClientMockRecorder) GetVenue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVenue", reflect.TypeOf((*MockVenueAPIClient)(nil).GetVenue), varargs...)
}

// IsAdmin mocks base method.
func (m *MockVenueAPIClient) IsAdmin(arg0 context.Context, arg1 *api.IsAdminRequest, arg2 ...grpc.CallOption) (*api.IsAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsAdmin", varargs...)
	ret0, _ := ret[0].(*api.IsAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockVenueAPIClientMockRecorder) IsAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockVenueAPIClient)(nil).IsAdmin), varargs...)
}

// RemoveAdmin mocks base method.
func (m *MockVenueAPIClient) RemoveAdmin(arg0 context.Context, arg1 *api.RemoveAdminRequest, arg2 ...grpc.CallOption) (*api.RemoveAdminResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAdmin", varargs...)
	ret0, _ := ret[0].(*api.RemoveAdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAdmin indicates an expected call of RemoveAdmin.
func (mr *MockVenueAPIClientMockRecorder) RemoveAdmin(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAdmin", reflect.TypeOf((*MockVenueAPIClient)(nil).RemoveAdmin), varargs...)
}

// RemoveTable mocks base method.
func (m *MockVenueAPIClient) RemoveTable(arg0 context.Context, arg1 *api.RemoveTableRequest, arg2 ...grpc.CallOption) (*models.Table, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTable", varargs...)
	ret0, _ := ret[0].(*models.Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTable indicates an expected call of RemoveTable.
func (mr *MockVenueAPIClientMockRecorder) RemoveTable(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTable", reflect.TypeOf((*MockVenueAPIClient)(nil).RemoveTable), varargs...)
}

// UpdateOpeningHours mocks base method.
func (m *MockVenueAPIClient) UpdateOpeningHours(arg0 context.Context, arg1 *api.UpdateOpeningHoursRequest, arg2 ...grpc.CallOption) (*api.UpdateOpeningHoursResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOpeningHours", varargs...)
	ret0, _ := ret[0].(*api.UpdateOpeningHoursResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOpeningHours indicates an expected call of UpdateOpeningHours.
func (mr *MockVenueAPIClientMockRecorder) UpdateOpeningHours(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOpeningHours", reflect.TypeOf((*MockVenueAPIClient)(nil).UpdateOpeningHours), varargs...)
}

// UpdateSpecialOpeningHours mocks base method.
func (m *MockVenueAPIClient) UpdateSpecialOpeningHours(arg0 context.Context, arg1 *api.UpdateOpeningHoursRequest, arg2 ...grpc.CallOption) (*api.UpdateOpeningHoursResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSpecialOpeningHours", varargs...)
	ret0, _ := ret[0].(*api.UpdateOpeningHoursResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSpecialOpeningHours indicates an expected call of UpdateSpecialOpeningHours.
func (mr *MockVenueAPIClientMockRecorder) UpdateSpecialOpeningHours(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecialOpeningHours", reflect.TypeOf((*MockVenueAPIClient)(nil).UpdateSpecialOpeningHours), varargs...)
}
