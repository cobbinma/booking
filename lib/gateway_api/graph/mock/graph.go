// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package mock_resolver is a generated GoMock package.
package mock_resolver

import (
	context "context"
	models "github.com/cobbinma/booking-platform/lib/gateway_api/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVenueService is a mock of VenueService interface
type MockVenueService struct {
	ctrl     *gomock.Controller
	recorder *MockVenueServiceMockRecorder
}

// MockVenueServiceMockRecorder is the mock recorder for MockVenueService
type MockVenueServiceMockRecorder struct {
	mock *MockVenueService
}

// NewMockVenueService creates a new mock instance
func NewMockVenueService(ctrl *gomock.Controller) *MockVenueService {
	mock := &MockVenueService{ctrl: ctrl}
	mock.recorder = &MockVenueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVenueService) EXPECT() *MockVenueServiceMockRecorder {
	return m.recorder
}

// GetVenue mocks base method
func (m *MockVenueService) GetVenue(ctx context.Context, id string) (*models.Venue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVenue", ctx, id)
	ret0, _ := ret[0].(*models.Venue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVenue indicates an expected call of GetVenue
func (mr *MockVenueServiceMockRecorder) GetVenue(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVenue", reflect.TypeOf((*MockVenueService)(nil).GetVenue), ctx, id)
}

// MockBookingService is a mock of BookingService interface
type MockBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockBookingServiceMockRecorder
}

// MockBookingServiceMockRecorder is the mock recorder for MockBookingService
type MockBookingServiceMockRecorder struct {
	mock *MockBookingService
}

// NewMockBookingService creates a new mock instance
func NewMockBookingService(ctrl *gomock.Controller) *MockBookingService {
	mock := &MockBookingService{ctrl: ctrl}
	mock.recorder = &MockBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookingService) EXPECT() *MockBookingServiceMockRecorder {
	return m.recorder
}

// GetSlot mocks base method
func (m *MockBookingService) GetSlot(ctx context.Context, slot models.SlotInput) (*models.GetSlotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlot", ctx, slot)
	ret0, _ := ret[0].(*models.GetSlotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlot indicates an expected call of GetSlot
func (mr *MockBookingServiceMockRecorder) GetSlot(ctx, slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlot", reflect.TypeOf((*MockBookingService)(nil).GetSlot), ctx, slot)
}

// CreateBooking mocks base method
func (m *MockBookingService) CreateBooking(ctx context.Context, input models.BookingInput) (*models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, input)
	ret0, _ := ret[0].(*models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking
func (mr *MockBookingServiceMockRecorder) CreateBooking(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingService)(nil).CreateBooking), ctx, input)
}
