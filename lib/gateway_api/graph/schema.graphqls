"""
Time (YYYY-MM-DDThh:mm:ssZ)
"""
scalar Time

"""
Time Of Day (hh:mm)
"""
scalar TimeOfDay

"""
Day of Week (Monday = 1, Sunday = 7)
"""
scalar DayOfWeek

"""
Slot Input is a booking enquiry.
"""
input SlotInput {
  "unique identifier of the venue"
  venueId: ID!
  "email of the customer"
  email: String!,
  "amount of people attending the booking"
  people: Int!,
  "desired start time of the booking (YYYY-MM-DDThh:mm:ssZ)"
  startsAt: Time!,
  "desired duration of the booking in minutes"
  duration: Int!,
}

"""
Slot is a possible booking that has yet to be confirmed.
"""
type Slot {
  "unique identifier of the venue"
  venueId: ID!
  "email of the customer"
  email: String!,
  "amount of people attending the booking"
  people: Int!,
  "desired start time of the booking (YYYY-MM-DDThh:mm:ssZ)"
  startsAt: Time!,
  "potential ending time of the booking (YYYY-MM-DDThh:mm:ssZ)"
  endsAt: Time!,
  "potential duration of the booking in minutes"
  duration: Int!,
}

"""
Slot is a possible booking that has yet to be confirmed.
"""
input BookingInput {
  "unique identifier of the venue"
  venueId: ID!
  "email of the customer"
  email: String!,
  "amount of people attending the booking"
  people: Int!,
  "start time of the booking (YYYY-MM-DDThh:mm:ssZ)"
  startsAt: Time!,
  "duration of the booking in minutes"
  duration: Int!,
}

"""
Booking has now been confirmed.
"""
type Booking {
  "unique identifier of the booking"
  id: ID!
  "unique identifier of the venue"
  venueId: ID!
  "email of the customer"
  email: String!,
  "amount of people attending the booking"
  people: Int!,
  "start time of the booking (hh:mm)"
  startsAt: Time!,
  "end time of the booking (hh:mm)"
  endsAt: Time!,
  "duration of the booking in minutes"
  duration: Int!,
  "unique identifier of the booking table"
  tableId: ID!,
}

"""
Venue where a booking can take place.
"""
type Venue {
  "unique identifier of the venue"
  id: ID!
  "name of the venue"
  name: String!
  "operating hours of the venue"
  openingHours: [OpeningHoursSpecification!]!
  "special operating hours of the venue"
  specialOpeningHours: [OpeningHoursSpecification!]!
  "operating hours of the venue for a specific date"
  openingHoursSpecification(date: Time): OpeningHoursSpecification
  "tables at the venue"
  tables: [Table!]!
  "email addresses of venue administrators"
  admins: [String!]!
  "human readable identifier of the venue"
  slug: ID!
  "paginated list of bookings for a venue"
  bookings(filter: BookingsFilter, pageInfo: PageInfo): BookingsPage
}

"""
An individual table at a venue.
"""
input TableInput {
  "unique venue identifier the table belongs to"
  venueId: ID!
  "name of the table"
  name: String!
  "maximum amount of people that can sit at table"
  capacity: Int!
}

"""
Input to remove a venue table
"""
input RemoveTableInput {
  "unique venue identifier the table belongs to"
  venueId: ID!
  "unique identifier of the table to be removed"
  tableId: ID!
}

"""
An individual table at a venue.
"""
type Table {
  "unique identifier of the table"
  id: ID!
  "name of the table"
  name: String!
  "maximum amount of people that can sit at table"
  capacity: Int!
}

"""
Day specific operating hours.
"""
type OpeningHoursSpecification {
  "the day of the week for which these opening hours are valid"
  dayOfWeek: DayOfWeek!,
  "the opening time of the place or service on the given day(s) of the week"
  opens: TimeOfDay!,
  "the closing time of the place or service on the given day(s) of the week"
  closes: TimeOfDay!,
  "date the special opening hours starts at. only valid for special opening hours"
  validFrom: Time,
  "date the special opening hours ends at. only valid for special opening hours"
  validThrough: Time,
}

"""
Day specific operating hours.
"""
input OpeningHoursSpecificationInput {
  "the day of the week for which these opening hours are valid"
  dayOfWeek: DayOfWeek!,
  "the opening time of the place or service on the given day(s) of the week"
  opens: TimeOfDay!,
  "the closing time of the place or service on the given day(s) of the week"
  closes: TimeOfDay!,
}

"""
Day specific special operating hours.
"""
input SpecialOpeningHoursSpecificationInput {
  "the day of the week for which these opening hours are valid"
  dayOfWeek: DayOfWeek!,
  "the opening time of the place or service on the given day(s) of the week"
  opens: TimeOfDay!,
  "the closing time of the place or service on the given day(s) of the week"
  closes: TimeOfDay!,
  "date the special opening hours starts at. only valid for special opening hours"
  validFrom: Time,
  "date the special opening hours ends at. only valid for special opening hours"
  validThrough: Time,
}

"""
Booking Enquiry Response.
"""
type GetSlotResponse {
  "slot matching the given enquiy"
  match: Slot,
  "slots have match the enquiry but have different starting times"
  otherAvailableSlots: [Slot!]
}

"""
Input to query if the user is an admin. Fields AND together.
"""
input IsAdminInput {
  "unique identifier of the venue"
  venueId: ID
  "human readable identifier of the venue"
  slug: ID
}

"""
Filter get venue queries. Fields AND together.
"""
input VenueFilter {
  "unique identifier of the venue"
  id: ID
  "human readable identifier of the venue"
  slug: ID
}

"""
Filter bookings.
"""
input BookingsFilter {
  "unique identifier of the venue"
  venueId: ID
  "specific date to query bookings for"
  date: Time!
}

"""
Information about the page being requested. Maximum page limit of 50.
"""
input PageInfo {
  "page number"
  page: Int!
  "maximum amount of results per page"
  limit: Int
}

"""
A page with a list of bookings.
"""
type BookingsPage {
  "list of bookings"
  bookings: [Booking!]!
  "is there a next page"
  hasNextPage: Boolean!
  "total number of pages"
  pages: Int!
}

"""
Booking queries.
"""
type Query {
  "get venue information from an venue identifier"
  getVenue(filter: VenueFilter!): Venue!
  "get slot is a booking enquiry"
  getSlot(input: SlotInput!): GetSlotResponse!
  "get slot is a booking enquiry"
  isAdmin(input: IsAdminInput!): Boolean!
}

"""
Input to add an administrator to a venue.
"""
input AdminInput {
  "unique identifier of the venue"
  venueId: ID!
  "email address of the administrator"
  email: String!
}

"""
Input to remove an administrator from a venue.
"""
input RemoveAdminInput {
  "unique identifier of the venue"
  venueId: ID!
  "email address of the administrator"
  email: String!
}

"""
Input to cancel an individual booking.
"""
input CancelBookingInput {
  "unique identifier of the venue"
  venueId: ID
  "unique identifier of the booking"
  id: ID!
}

"""
Input to update a venue's operating hours.
"""
input UpdateOpeningHoursInput {
  "unique identifier of the venue"
  venueId: ID!
  "operating hours of the venue"
  openingHours: [OpeningHoursSpecificationInput!]!
}

"""
Input to update a venue's special operating hours.
"""
input UpdateSpecialOpeningHoursInput {
  "unique identifier of the venue"
  venueId: ID!
  "special operating hours of the venue"
  specialOpeningHours: [SpecialOpeningHoursSpecificationInput!]!
}

"""
Booking mutations.
"""
type Mutation {
  "create booking is a confirming a booking slot"
  createBooking(input: BookingInput!): Booking!
  "add a table to a venue"
  addTable(input: TableInput!): Table!
  "remove a table from a venue"
  removeTable(input: RemoveTableInput!): Table!
  "add an admin to a venue"
  addAdmin(input: AdminInput!): String!
  "remove an admin from a venue"
  removeAdmin(input: RemoveAdminInput!): String!
  "cancel an individual booking"
  cancelBooking(input: CancelBookingInput!): Booking!
  "update the venue's opening hours"
  updateOpeningHours(input: UpdateOpeningHoursInput!): [OpeningHoursSpecification!]!
  "update the venue's special opening hours"
  updateSpecialOpeningHours(input: UpdateSpecialOpeningHoursInput!): [OpeningHoursSpecification!]!
}